//--- Gradle Dependencies

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'idea'

//--- Script Utilties
project.getOr = {String envProp, projectProp -> System.getenv(envProp) ?: projectProp}
project.logFile = {LogLevel logLevel, String file ->  logger.log(logLevel, new File('gradle/docs/'+file+'.txt').getText('UTF-8'))}
project.printDocs = {String file -> println(new File('gradle/docs/'+file+'.txt').getText('UTF-8'))}

//--- Project SourceSets
sourceSets {
    main
    test
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
    module {
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

//--- Project Defaults
setVersion(modVersion)
setGroup(modGroup)
setArchivesBaseName(modName)

//Ensures no compilation errors due to unrecognised unicode characters
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

//--- Settings
minecraft {
    version = modForge
    runDir = "run"

    replace "@VERSION@", modVersion
    mappings = modMappings
    useDepAts = true
}

//--- Include the ModWorks Processor
if(ii_useModworksPreprocessor.asBoolean())
    apply from: rootProject.file("gradle/modworks.gradle")

compileJava {
    logFile(LogLevel.WARN, "gradlephant")
    logger.log(LogLevel.WARN, ii_gradlephantTitle)
    logger.log(LogLevel.WARN, ii_gradlephantLink+'\n')

    if(ii_printSourceSets.toBoolean())
    {
        logger.log(LogLevel.WARN, 'SourceSets in Project: ')
        sourceSets.each { srcSet ->
            println "> ["+srcSet.name+"]"
            print "   - Sources: "+srcSet.allJava.srcDirs+"\n"
        }
        println ""
    }

    println 'This mod uses Team II\'s Mod Setup Script, run [gradlew modSetupHelp].'

    if(ii_generateCoreJar=='true')
    {
        println 'This mod will generate a [core jar] and place it inside its [main jar] during build.'
        println 'For this, a valid fingerprint and configured keystore is needed.'
    }
    else
        println 'This mod will not generate a [core jar] inside its [main jar]. Enable it in [gradle.properties] if needed.'

}

//--- Generating Deobfed Jar
tasks.register('deobfJar', Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': modATPath
        attributes 'Maven-Artifact': modGroup + ':' + modName + ':' + modVersion
    }
}

artifacts {
    archives deobfJar
}

//--- Resource Processing

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", modVersion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace properties
        expand 'version': modVersion,
                'mcversion': project.minecraft.version,
                'modName' : modName,
                'description': mcmod_Description,
                'modURL': mcmod_URL,
                'modContributors': mcmod_Contributors,
                'modDeveloper': mcmod_Developer
    }

    // copy everything else except the mcmod.info and excluded files
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


//--- Handling custom.gradle

//To use personalized options when working with the mod create a file named custom.gradle
//The file is not sychronised with GitHub and can be used i.e. to store username and password
//Thanks to BluSunrize for the idea (taken from IE)
def customGradle = rootProject.file('custom.gradle')
if (customGradle.exists()) {
    apply from: customGradle
}

tasks.build.doLast(){
    if(ii_printSourceSets.toBoolean())
        logger.log(LogLevel.WARN, 'Build Location: '+file("./build/libs/").getPath())
}


//--- Core Jar Generation
// Create a core jar, sign it and place it inside the main jar
if(ii_generateCoreJar=='true')
    apply from: rootProject.file('gradle/corejar.gradle')

//--- IE Addon
apply from: rootProject.file('gradle/ieaddon.gradle')

//--- Help Function
tasks.register('modSetupDocs') {
    group = "Documentation"
    description = "Displays the Mod Build Script documentation"
    doLast {
        printDocs("setup")
    }
}